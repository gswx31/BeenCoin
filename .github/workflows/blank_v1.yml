```yaml
name: Setup BeenCoin Frontend

on:
  workflow_dispatch:  # 수동 실행 가능
  push:
    branches: [ main ]

jobs:
  setup-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create frontend structure
      run: |
        # 폴더 구조 생성
        mkdir -p client/{src/components,public} .github/workflows
        
        # 디버깅: 작업 디렉토리 확인
        echo "Current directory: $(pwd)"
        ls -la

        # client/package.json 생성
        cd client
        cat > package.json << 'EOF'
        {
          "name": "beencoin-frontend",
          "version": "0.1.0",
          "private": true,
          "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "react-scripts": "5.0.1",
            "chart.js": "^4.4.4",
            "react-chartjs-2": "^5.2.0",
            "axios": "^1.7.7",
            "react-router-dom": "^6.27.0",
            "react-toastify": "^10.0.5",
            "recharts": "^2.12.7",
            "tailwindcss": "^3.4.10"
          },
          "scripts": {
            "start": "react-scripts start",
            "build": "react-scripts build",
            "test": "react-scripts test",
            "eject": "react-scripts eject"
          },
          "eslintConfig": {
            "extends": [
              "react-app",
              "react-app/jest"
            ]
          },
          "browserslist": [
            ">0.2%",
            "not dead",
            "not op_mini all"
          ]
        }
        EOF
        
        # client/tailwind.config.js 생성
        cat > tailwind.config.js << 'EOF'
        module.exports = {
          content: [
            "./src/**/*.{js,jsx,ts,tsx}",
          ],
          theme: {
            extend: {
              colors: {
                primary: '#1a202c',
                secondary: '#2d3748',
                accent: '#4fd1c5',
              },
            },
          },
          plugins: [],
        }
        EOF
        
        # client/src/index.css 생성
        cat > src/index.css << 'EOF'
        @tailwind base;
        @tailwind components;
        @tailwind utilities;

        body {
          margin: 0;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
            sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
          background-color: #f7fafc;
        }
        EOF
        
        # client/public/index.html 생성
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta name="theme-color" content="#000000" />
            <meta name="description" content="BeenCoin 모의투자 플랫폼" />
            <title>BeenCoin</title>
          </head>
          <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>
          </body>
        </html>
        EOF
        
        # client/src/App.js 생성
        mkdir -p src/components
        cat > src/App.js << 'EOF'
        import React from 'react';
        import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
        import Login from './components/Login';
        import Register from './components/Register';
        import Dashboard from './components/Dashboard';
        import Portfolio from './components/Portfolio';
        import OrderForm from './components/OrderForm';
        import { ToastContainer } from 'react-toastify';
        import 'react-toastify/dist/ReactToastify.css';
        import './index.css';

        function App() {
          return (
            <Router>
              <div className="min-h-screen bg-gray-100">
                <Routes>
                  <Route path="/login" element={<Login />} />
                  <Route path="/register" element={<Register />} />
                  <Route path="/dashboard" element={<Dashboard />} />
                  <Route path="/portfolio" element={<Portfolio />} />
                  <Route path="/order" element={<OrderForm />} />
                  <Route path="/" element={<Login />} />
                </Routes>
                <ToastContainer />
              </div>
            </Router>
          );
        }

        export default App;
        EOF
        
        # client/src/components/Login.js 생성
        cat > src/components/Login.js << 'EOF'
        import React, { useState } from 'react';
        import axios from 'axios';
        import { useNavigate } from 'react-router-dom';
        import { toast } from 'react-toastify';

        const Login = () => {
          const [username, setUsername] = useState('');
          const [password, setPassword] = useState('');
          const navigate = useNavigate();

          const handleSubmit = async (e) => {
            e.preventDefault();
            try {
              const response = await axios.post('/api/v1/auth/login', { username, password });
              localStorage.setItem('token', response.data.access_token);
              toast.success('로그인 성공!');
              navigate('/dashboard');
            } catch (error) {
              toast.error('로그인 실패: ' + (error.response?.data?.detail || '오류 발생'));
            }
          };

          return (
            <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-xl">
              <h2 className="text-2xl font-bold mb-4 text-center">로그인</h2>
              <form onSubmit={handleSubmit} className="space-y-4">
                <input
                  type="text"
                  placeholder="아이디"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                />
                <input
                  type="password"
                  placeholder="비밀번호"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                />
                <button type="submit" className="w-full p-2 bg-accent text-white rounded hover:bg-teal-600">
                  로그인
                </button>
              </form>
              <p className="mt-4 text-center">
                계정이 없으신가요? <a href="/register" className="text-accent hover:underline">회원가입</a>
              </p>
            </div>
          );
        };

        export default Login;
        EOF
        
        # client/src/components/Register.js 생성
        cat > src/components/Register.js << 'EOF'
        import React, { useState } from 'react';
        import axios from 'axios';
        import { useNavigate } from 'react-router-dom';
        import { toast } from 'react-toastify';

        const Register = () => {
          const [username, setUsername] = useState('');
          const [password, setPassword] = useState('');
          const navigate = useNavigate();

          const handleSubmit = async (e) => {
            e.preventDefault();
            try {
              await axios.post('/api/v1/auth/register', { username, password });
              toast.success('회원가입 성공! 로그인하세요.');
              navigate('/login');
            } catch (error) {
              toast.error('회원가입 실패: ' + (error.response?.data?.detail || '오류 발생'));
            }
          };

          return (
            <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-xl">
              <h2 className="text-2xl font-bold mb-4 text-center">회원가입</h2>
              <form onSubmit={handleSubmit} className="space-y-4">
                <input
                  type="text"
                  placeholder="아이디"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                />
                <input
                  type="password"
                  placeholder="비밀번호"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                />
                <button type="submit" className="w-full p-2 bg-accent text-white rounded hover:bg-teal-600">
                  가입하기
                </button>
              </form>
              <p className="mt-4 text-center">
                이미 계정이 있으신가요? <a href="/login" className="text-accent hover:underline">로그인</a>
              </p>
            </div>
          );
        };

        export default Register;
        EOF
        
        # client/src/components/Dashboard.js 생성
        cat > src/components/Dashboard.js << 'EOF'
        import React, { useState, useEffect } from 'react';
        import axios from 'axios';
        import { Line } from 'react-chartjs-2';
        import {
          Chart as ChartJS,
          CategoryScale,
          LinearScale,
          PointElement,
          LineElement,
          Title,
          Tooltip,
          Legend,
        } from 'chart.js';
        import { toast } from 'react-toastify';

        ChartJS.register(
          CategoryScale,
          LinearScale,
          PointElement,
          LineElement,
          Title,
          Tooltip,
          Legend
        );

        const Dashboard = () => {
          const [account, setAccount] = useState(null);
          const [priceData, setPriceData] = useState({ labels: [], datasets: [] });
          const token = localStorage.getItem('token');

          useEffect(() => {
            const fetchAccount = async () => {
              try {
                const response = await axios.get('/api/v1/account', {
                  headers: { Authorization: `Bearer ${token}` },
                });
                setAccount(response.data);
              } catch (error) {
                toast.error('계좌 정보 로드 실패');
              }
            };

            const ws = new WebSocket('ws://localhost:8000/api/v1/ws/prices/BTCUSDT');
            ws.onmessage = (event) => {
              const data = JSON.parse(event.data);
              setPriceData((prev) => {
                const newLabels = [...prev.labels, new Date().toLocaleTimeString()];
                const newData = [...(prev.datasets[0]?.data || []), parseFloat(data.price)];
                return {
                  labels: newLabels.slice(-20),
                  datasets: [{
                    label: 'BTCUSDT Price',
                    data: newData.slice(-20),
                    borderColor: '#4fd1c5',
                    tension: 0.1
                  }]
                };
              });
            };

            fetchAccount();
            return () => ws.close();
          }, [token]);

          if (!account) return <div className="text-center mt-10">로딩 중...</div>;

          return (
            <div className="max-w-4xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-xl">
              <h2 className="text-2xl font-bold mb-4">대시보드</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="p-4 bg-gray-100 rounded">
                  <p className="text-sm text-gray-600">잔고</p>
                  <p className="text-lg font-semibold">${account.balance.toFixed(2)}</p>
                </div>
                <div className="p-4 bg-gray-100 rounded">
                  <p className="text-sm text-gray-600">총 수익</p>
                  <p className={`text-lg font-semibold ${account.total_profit > 0 ? 'text-green-600' : 'text-red-600'}`}>
                    ${account.total_profit.toFixed(2)}
                  </p>
                </div>
                <div className="p-4 bg-gray-100 rounded">
                  <p className="text-sm text-gray-600">수익률</p>
                  <p className="text-lg font-semibold">{account.profit_rate.toFixed(2)}%</p>
                </div>
              </div>
              <h3 className="text-xl font-semibold mb-2">실시간 BTCUSDT 가격 차트</h3>
              <div className="bg-gray-50 p-4 rounded">
                <Line data={priceData} />
              </div>
              <div className="mt-4 flex space-x-4">
                <a href="/portfolio" className="text-accent hover:underline">포트폴리오 보기</a>
                <a href="/order" className="text-accent hover:underline">주문 하기</a>
              </div>
            </div>
          );
        };

        export default Dashboard;
        EOF
        
        # client/src/components/Portfolio.js 생성
        cat > src/components/Portfolio.js << 'EOF'
        import React, { useState, useEffect } from 'react';
        import axios from 'axios';
        import { toast } from 'react-toastify';

        const Portfolio = () => {
          const [positions, setPositions] = useState([]);
          const token = localStorage.getItem('token');

          useEffect(() => {
            const fetchPortfolio = async () => {
              try {
                const response = await axios.get('/api/v1/account', {
                  headers: { Authorization: `Bearer ${token}` },
                });
                setPositions(response.data.positions);
              } catch (error) {
                toast.error('포트폴리오 로드 실패');
              }
            };
            fetchPortfolio();
          }, [token]);

          return (
            <div className="max-w-4xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-xl">
              <h2 className="text-2xl font-bold mb-4">포트폴리오</h2>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="p-2 text-left">심볼</th>
                      <th className="p-2 text-left">수량</th>
                      <th className="p-2 text-left">평균 가격</th>
                      <th className="p-2 text-left">현재 가치</th>
                      <th className="p-2 text-left">미실현 수익</th>
                    </tr>
                  </thead>
                  <tbody>
                    {positions.map((pos, index) => (
                      <tr key={index} className="border-b">
                        <td className="p-2">{pos.symbol}</td>
                        <td className="p-2">{pos.quantity}</td>
                        <td className="p-2">${pos.average_price.toFixed(2)}</td>
                        <td className="p-2">${pos.current_value.toFixed(2)}</td>
                        <td className={`p-2 ${pos.unrealized_profit > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          ${pos.unrealized_profit.toFixed(2)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <a href="/dashboard" className="mt-4 inline-block text-accent hover:underline">대시보드로 돌아가기</a>
            </div>
          );
        };

        export default Portfolio;
        EOF
        
        # client/src/components/OrderForm.js 생성
        cat > src/components/OrderForm.js << 'EOF'
        import React, { useState } from 'react';
        import axios from 'axios';
        import { useNavigate } from 'react-router-dom';
        import { toast } from 'react-toastify';

        const OrderForm = () => {
          const [symbol, setSymbol] = useState('BTCUSDT');
          const [side, setSide] = useState('BUY');
          const [orderType, setOrderType] = useState('MARKET');
          const [quantity, setQuantity] = useState('');
          const [price, setPrice] = useState('');
          const token = localStorage.getItem('token');
          const navigate = useNavigate();

          const handleSubmit = async (e) => {
            e.preventDefault();
            try {
              await axios.post('/api/v1/orders', {
                symbol,
                side,
                order_type: orderType,
                quantity: parseFloat(quantity),
                price: orderType === 'LIMIT' ? parseFloat(price) : undefined
              }, {
                headers: { Authorization: `Bearer ${token}` },
              });
              toast.success('주문 성공!');
              navigate('/dashboard');
            } catch (error) {
              toast.error('주문 실패: ' + (error.response?.data?.detail || '오류 발생'));
            }
          };

          return (
            <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-xl">
              <h2 className="text-2xl font-bold mb-4">주문 하기</h2>
              <form onSubmit={handleSubmit} className="space-y-4">
                <select
                  value={symbol}
                  onChange={(e) => setSymbol(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                >
                  <option>BTCUSDT</option>
                  <option>ETHUSDT</option>
                  <option>BNBUSDT</option>
                </select>
                <select
                  value={side}
                  onChange={(e) => setSide(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                >
                  <option>BUY</option>
                  <option>SELL</option>
                </select>
                <select
                  value={orderType}
                  onChange={(e) => setOrderType(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                >
                  <option>MARKET</option>
                  <option>LIMIT</option>
                </select>
                <input
                  type="number"
                  placeholder="수량"
                  value={quantity}
                  onChange={(e) => setQuantity(e.target.value)}
                  className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                />
                {orderType === 'LIMIT' && (
                  <input
                    type="number"
                    placeholder="가격"
                    value={price}
                    onChange={(e) => setPrice(e.target.value)}
                    className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-accent"
                  />
                )}
                <button type="submit" className="w-full p-2 bg-accent text-white rounded hover:bg-teal-600">
                  주문 제출
                </button>
              </form>
              <a href="/dashboard" className="mt-4 inline-block text-accent hover:underline">대시보드로 돌아가기</a>
            </div>
          );
        };

        export default OrderForm;
        EOF
        
        # client/src/index.js 생성
        cat > src/index.js << 'EOF'
        import React from 'react';
        import ReactDOM from 'react-dom/client';
        import App from './App';
        import './index.css';

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(
          <React.StrictMode>
            <App />
          </React.StrictMode>
        );
        EOF
        
        # .gitignore 업데이트 (frontend 관련 추가)
        cd ..
        cat > .gitignore << 'EOF'
        __pycache__/
        *.pyc
        *.pyo
        *.pyd
        .Python
        env/
        venv/
        .venv/
        *.sqlite3
        *.db
        .DS_Store
        .coverage
        htmlcov/
        .pytest_cache/
        *.log
        instance/
        .webassets-cache
        .scrapy
        docs/_build/
        target/
        .ipynb_checkpoints
        .python-version
        .env
        celerybeat-schedule
        client/node_modules
        client/build
        EOF

        # 디버깅: 생성된 파일 확인
        echo "Frontend files created:"
        find client -type f

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "🚀 BeenCoin 프론트엔드 설정: React + Tailwind CSS" --allow-empty || echo "No changes to commit"

    - name: Push to new branch
      run: |
        git checkout -b auto-frontend-branch-$(date +%s)
        git push origin auto-frontend-branch-$(date +%s) --force-with-lease

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "🚀 BeenCoin 프론트엔드 설정: React + Tailwind CSS"
        title: "BeenCoin 프론트엔드 설정"
        body: "React와 Tailwind CSS로 프론트엔드 설정, 반응형 UI/UX, __init__.py 생략"
        branch: "auto-frontend-branch-$(date +%s)"
        base: "main"
        delete-branch: true
```
